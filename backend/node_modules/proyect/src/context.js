let fs = require("fs");

function existFolder(path, callback) {
    fs.lstat(path, (err, stats) =>
        callback(stats ? stats.isDirectory() : false)
    );
}

function existFile(path, callback) {
    fs.lstat(path, (err, stats) => callback(stats ? stats.isFile() : false));
}

function createFolder(path) {
    return new Promise((resolve, reject) => {
        existFolder(path, exist => {
            if (exist) {
                resolve();
            } else {
                fs.mkdir(path, "0o777", err => (err ? reject() : resolve()));
            }
        });
    });
}

function createFile(path, content) {
    return new Promise((resolve, reject) => {
        existFile(path, exist => {
            if (exist) {
                resolve();
            } else {
                fs.writeFile(
                    path,
                    content,
                    err => (err ? reject() : resolve())
                );
            }
        });
    });
}

function createProyect(list) {
    return Promise.all(
        list.map(
            ({ type, value, children }) =>
                type === "folder"
                    ? createFolder(value).then(() => createProyect(children))
                    : createFile(value, children)
        )
    );
}

function context(params, root) {
    function create(callback) {
        createProyect(
            [].concat(
                callback({
                    file(value, children = "") {
                        return {
                            type: "file",
                            value,
                            children
                        };
                    },
                    folder(value, ...children) {
                        return {
                            type: "folder",
                            value,
                            children
                        };
                    }
                })
            )
        ).then(() => {
            console.log("ready!");
        });
    }
    function input() {}
    return {
        params,
        create,
        input
    };
}

module.exports = context;
